{"version":3,"sources":["state/action-typs.ts","state/reducers/movies.ts","state/reducers/search.ts","state/reducers/index.ts","state/action-creators.ts","state/hooks.ts","state/index.ts","components/ui/button/index.tsx","components/ui/input/index.tsx","components/ui/banner/index.tsx","components/ui/pagination/index.tsx","components/ui/card/index.tsx","config/index.ts","api/index.ts","components/header/search/index.tsx","components/header/index.tsx","components/content/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionTypes","initialMoviesState","loading","data","initialSearchState","reducers","combineReducers","Movies","state","action","type","SEARCH_MOVIES","payoad","movies","SearchOptions","SEARCH_TOPTIONS","searchOmdb","search","page","dispatch","a","searchMovies","response","setSearchOptions","title","useActions","useDispatch","bindActionCreators","useTypedSelector","useSelector","store","createStore","applyMiddleware","thunk","Button","label","onClick","className","Input","value","onChange","e","target","Banner","message","Pagination","pageCount","onPageChange","previousLabel","nextLabel","selectedItem","selected","pageRangeDisplayed","marginPagesDisplayed","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","Card","children","expand","appSettings","API_URL","process","API_KEY","PAGINATION_ITEMS_PER_PAGE","parseInt","PAGINATION_INITIAL_PAGE","request","url","fetch","json","getMovieDetail","imdbID","Search","useState","searchValue","setSearchValue","length","Header","MovieGrid","lazy","Content","fallback","totalResults","Error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3abbae5.chunk.js","sourcesContent":["export enum ActionTypes {\n  SEARCH_MOVIES = 'SEARCH_MOVIES',\n  SEARCH_TOPTIONS = 'SEARCH_OPTIONS',\n}\n","import { MovieSearchModel } from 'api/models';\nimport { ActionTypes } from 'state/action-typs';\nimport { searchMoviesAction } from 'state/actions';\n\ninterface MovieState {\n  loading: boolean;\n  data: MovieSearchModel | null;\n}\n\nconst initialMoviesState: MovieState = {\n  loading: false,\n  data: null,\n};\n\nexport const moviesReducer = (\n  state = initialMoviesState,\n  action: searchMoviesAction,\n): MovieState => {\n  switch (action.type) {\n    case ActionTypes.SEARCH_MOVIES:\n      return {\n        ...state,\n        loading: false,\n        data: action.payoad.movies,\n      };\n    default:\n      return state;\n  }\n};\n","import { SearchOptionsModel } from 'api/models';\nimport { ActionTypes } from 'state/action-typs';\nimport { searchOptionsAction } from 'state/actions';\n\ninterface SearchState {\n  loading: boolean;\n  data: SearchOptionsModel | null;\n}\n\nconst initialSearchState: SearchState = {\n  loading: false,\n  data: null,\n};\n\nexport const searchReducer = (\n  state = initialSearchState,\n  action: searchOptionsAction,\n): SearchState => {\n  switch (action.type) {\n    case ActionTypes.SEARCH_TOPTIONS:\n      return {\n        ...state,\n        loading: false,\n        data: { ...state.data, ...action.payoad },\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { moviesReducer } from './movies';\nimport { searchReducer } from './search';\n\nexport const reducers = combineReducers({\n  Movies: moviesReducer,\n  SearchOptions: searchReducer,\n});\n\nexport type RootState = ReturnType<typeof reducers>;\n","import { ActionTypes } from './action-typs';\nimport { Dispatch } from 'redux';\nimport { searchMovies } from 'api';\nimport { searchMoviesAction, searchOptionsAction } from './actions';\nimport { SearchOptionsModel } from 'api/models';\n\nexport const searchOmdb = (search: string, page: number) => {\n  return async (dispatch: Dispatch<searchMoviesAction>) => {\n    const response = await searchMovies(search, page);\n    dispatch({\n      type: ActionTypes.SEARCH_MOVIES,\n      payoad: {\n        movies: response,\n      },\n    });\n  };\n};\n\nexport const setSearchOptions = ({ title }: SearchOptionsModel) => {\n  return async (dispatch: Dispatch<searchOptionsAction>) => {\n    dispatch({\n      type: ActionTypes.SEARCH_TOPTIONS,\n      payoad: {\n        title,\n      },\n    });\n  };\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { searchOmdb, setSearchOptions } from './action-creators';\nimport { RootState } from './reducers';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators({ searchOmdb, setSearchOptions }, dispatch);\n};\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducers } from './reducers';\n\nexport * from './hooks';\n\nexport const store = createStore(reducers, {}, applyMiddleware(thunk));\n","import './index.scss';\n\ninterface Props {\n  label: string;\n  onClick?: () => void;\n}\n\nexport const Button = ({ label, onClick }: Props) => {\n  return (\n    <button className={`button-default`} onClick={onClick}>\n      {label}\n    </button>\n  );\n};\n","import './index.scss';\n\ninterface Props {\n  value?: string | number;\n  onChange: (value: string) => void;\n}\n\nexport const Input = ({ value, onChange }: Props) => {\n  return (\n    <input\n      className={`input`}\n      value={value}\n      onChange={(e) => {\n        onChange(e.target.value);\n      }}\n    />\n  );\n};\n","import './index.scss';\ninterface Props {\n  type?: 'message' | 'error';\n  message?: string;\n}\n\nexport const Banner = ({ type, message }: Props) => {\n  return (\n    <div className={`status ${type === 'error' ? 'error' : ''}`}>\n      <p>{message}</p>\n    </div>\n  );\n};\n","import ReactPaginate from 'react-paginate';\nimport './index.scss';\n\ninterface Props {\n  pageCount: number;\n  onPageChange: (selectedPage: number) => void;\n}\n\nexport const Pagination = ({ pageCount, onPageChange }: Props) => {\n  return (\n    <>\n      <ReactPaginate\n        previousLabel={'← Previous'}\n        nextLabel={'Next →'}\n        pageCount={pageCount}\n        onPageChange={(selectedItem) => {\n          onPageChange(selectedItem.selected + 1);\n        }}\n        pageRangeDisplayed={2}\n        marginPagesDisplayed={2}\n        containerClassName={'pagination'}\n        previousLinkClassName={'pagination__link'}\n        nextLinkClassName={'pagination__link'}\n        disabledClassName={'pagination__link--disabled'}\n        activeClassName={'pagination__link--active'}\n      />\n    </>\n  );\n};\n","import { ReactChild } from 'react';\nimport './index.scss';\n\ninterface Props {\n  children: ReactChild[] | ReactChild;\n  expand: boolean;\n}\nexport const Card = ({ children, expand }: Props) => {\n  return (\n    <div className={`${expand ? 'card-expand' : ''} card`}>{children}</div>\n  );\n};\n","/* eslint-disable no-undef */\nexport const appSettings = {\n  API_URL: process.env.REACT_APP_API_URL,\n  API_KEY: process.env.REACT_APP_API_KEY,\n  PAGINATION_ITEMS_PER_PAGE: parseInt(\n    `${process.env.REACT_APP_PAGINATION_ITEMS_PER_PAGE}`,\n  ),\n  PAGINATION_INITIAL_PAGE: parseInt(\n    `${process.env.REACT_APP_PAGINATION_INITIAL_PAGE}`,\n  ),\n};\n","import { MovieSearchModel, MovieDetailModel } from './models';\nimport { appSettings } from 'config';\n\nconst request = async <TResponse>(url: string) => {\n  const response = await fetch(\n    `${appSettings.API_URL}?apikey=${appSettings.API_KEY}&${url}`,\n  );\n  const data = await response.json();\n  return data as TResponse;\n};\n\nexport const searchMovies = async (search: string, page: number) => {\n  const response = await request<MovieSearchModel>(\n    `type=movie&page=${page}&s=${search}`,\n  );\n\n  return response;\n};\n\nexport const getMovieDetail = async (imdbID: string) => {\n  const response = await request<MovieDetailModel>(`i=${imdbID}`);\n\n  return response;\n};\n","import { Button, Input } from 'components/ui';\nimport { appSettings } from 'config';\nimport { useState } from 'react';\nimport { useActions } from 'state';\n\nexport const Search = () => {\n  const { searchOmdb, setSearchOptions } = useActions();\n  const [searchValue, setSearchValue] = useState('');\n\n  return (\n    <>\n      <Input\n        value={searchValue}\n        onChange={(value) => {\n          setSearchValue(value);\n        }}\n      />\n      <Button\n        label=\"SEARCH\"\n        onClick={() => {\n          if (searchValue.length) {\n            searchOmdb(searchValue, appSettings.PAGINATION_INITIAL_PAGE);\n            setSearchOptions({ title: searchValue });\n          }\n        }}\n      />\n    </>\n  );\n};\n","import { Search } from './search';\nimport './index.scss';\n\nexport const Header = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"header-content\">\n        <div className=\"logo\">\n          <h1>OMDB Search</h1>\n        </div>\n        <div className=\"search-box\">\n          <span>Search a movie</span>\n          <Search />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useTypedSelector } from 'state';\nimport { lazy, Suspense } from 'react';\nimport { Banner } from 'components/ui';\nconst MovieGrid = lazy(() => import('./movieGrid'));\nimport './index.scss';\n\nexport const Content = () => {\n  const movies = useTypedSelector((state) => state.Movies.data);\n\n  return (\n    <div className=\"content\">\n      <div className=\"content-container\">\n        {movies === null ? (\n          <Banner message=\"Welcome to OMDB Search, search something in the bar above!\" />\n        ) : movies?.Search?.length ? (\n          <Suspense fallback={<></>}>\n            <MovieGrid\n              movies={movies.Search}\n              totalResults={movies?.totalResults}\n            />\n          </Suspense>\n        ) : (\n          <Banner type={'error'} message={movies?.Error} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Content, Header } from 'components';\nimport 'styles/global.scss';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Content />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from 'state';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}