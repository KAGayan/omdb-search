{"version":3,"file":"static/js/633.00a20da2.chunk.js","mappings":"uOAWMA,EAAY,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,KAC1C,GAA8BC,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAU,mCAAG,WAAOP,GAAP,wFACMQ,EAAAA,EAAAA,GAAeR,GADrB,OACXS,EADW,OAGjBH,EAAWG,GAHM,2CAAH,sDAMhB,OACE,UAAC,KAAD,CAAMC,YAAoBC,IAAZN,EAAd,UACc,QAAXH,GACC,gBACEU,UAAU,YACVC,MAAO,CACLC,gBAAgB,QAAD,OAAUZ,EAAV,UAInB,yBAEF,iBAAKU,UAAU,OAAf,WACE,iBAAKA,UAAU,cAAf,WACE,uBAAIX,IACHI,IACC,iBAAKO,UAAU,UAAf,WACE,4BACE,oCACA,8BAAIP,QAAJ,IAAIA,OAAJ,EAAIA,EAASU,WAEf,4BACE,sCACA,8BAAIV,QAAJ,IAAIA,OAAJ,EAAIA,EAASW,aAEf,4BACE,sCADF,OAEGX,QAFH,IAEGA,OAFH,EAEGA,EAASY,QAAQC,KAAI,SAACC,GACrB,OACE,0BACE,qCACKA,QADL,IACKA,OADL,EACKA,EAAQC,OADb,YACuBD,QADvB,IACuBA,OADvB,EACuBA,EAAQE,UAFjC,UAAarB,EAAb,mBAAuBmB,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAQE,qBAW3C,iBAAKT,UAAU,SAAf,WACE,gBAAKA,UAAU,OAAf,UACE,uBAAIT,OAEN,gBAAKS,UAAU,SAAf,UACIP,IACA,SAAC,KAAD,CACEiB,MAAM,UACNC,QAAS,WACPhB,EAAWP,kBAWvBwB,EAAW,SAACC,EAAkBC,GAAnB,OACfD,EAAUzB,SAAW0B,EAAU1B,QAEjC,GAAe2B,EAAAA,EAAAA,MAAK5B,EAAWyB,G,kBChC/B,EAvCkB,SAAC,GAAqC,IAAnCI,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,aACrBC,GAAgBC,EAAAA,EAAAA,KAAiB,SAACC,GAAD,OAAWA,EAAMF,cAAcG,QAC9DC,GAAeC,EAAAA,EAAAA,MAAfD,WASR,OACE,iCACE,gBAAKtB,UAAU,OAAf,SACGgB,EAAOV,KAAI,SAACkB,EAAOC,GAClB,OACE,SAAC,EAAD,CAEErC,OAAQoC,EAAMpC,OACdC,MAAOmC,EAAME,MACbpC,OAAQkC,EAAMG,OACdpC,KAAMiC,EAAMI,MALd,UACUJ,EAAMpC,OADhB,YAC0BqC,UAShC,eAAGzB,UAAU,gBAAb,UAA8BiB,EAA9B,oBACA,SAAC,KAAD,CACEY,UAAWC,KAAKC,KACdC,SAASf,GAAgBgB,EAAAA,EAAAA,2BAE3BC,aAAc,SAACC,GACbjB,GA5BgB,SACtBiB,EACAjB,GAEAI,EAAWJ,EAAc7B,MAAO8C,GAwBTC,CAAgBD,EAAcjB","sources":["components/content/movieGrid/movieCard.tsx","components/content/movieGrid/index.tsx"],"sourcesContent":["import { getMovieDetail } from 'api';\nimport { Button, Card } from 'components/ui';\nimport { memo, useState } from 'react';\nimport { MovieDetailModel } from 'api/models';\ninterface Props {\n  imdbID: string;\n  title: string;\n  poster?: string;\n  year: string;\n}\n\nconst MovieCard = ({ imdbID, title, poster, year }: Props) => {\n  const [details, setDetails] = useState<MovieDetailModel>();\n\n  const getDetails = async (imdbID: string) => {\n    const response = await getMovieDetail(imdbID);\n\n    setDetails(response);\n  };\n\n  return (\n    <Card expand={details !== undefined}>\n      {poster !== 'N/A' ? (\n        <div\n          className=\"image-box\"\n          style={{\n            backgroundImage: `url('${poster}')`,\n          }}\n        />\n      ) : (\n        <></>\n      )}\n      <div className=\"info\">\n        <div className=\"details-box\">\n          <p>{title}</p>\n          {details && (\n            <div className=\"details\">\n              <div>\n                <span>Plot</span>\n                <p>{details?.Plot}</p>\n              </div>\n              <div>\n                <span>Actors</span>\n                <p>{details?.Actors}</p>\n              </div>\n              <div>\n                <span>Ratings</span>\n                {details?.Ratings.map((rating) => {\n                  return (\n                    <div key={`${imdbID}-${rating?.Value}`}>\n                      <p>\n                        - {rating?.Source}: {rating?.Value}\n                      </p>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"footer\">\n          <div className=\"year\">\n            <p>{year}</p>\n          </div>\n          <div className=\"button\">\n            {!details && (\n              <Button\n                label=\"DETAILS\"\n                onClick={() => {\n                  getDetails(imdbID);\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nconst areEqual = (prevProps: Props, nextProps: Props) =>\n  prevProps.imdbID === nextProps.imdbID;\n\nexport default memo(MovieCard, areEqual);\n","import { MovieModel, SearchOptionsModel } from 'api/models';\nimport MovieCard from './movieCard';\nimport { useActions, useTypedSelector } from 'state';\nimport { Pagination } from 'components/ui';\nimport { appSettings } from 'config';\nimport './index.scss';\n\ninterface Props {\n  movies: MovieModel[];\n  totalResults: string;\n}\n\nconst MovieGrid = ({ movies, totalResults }: Props) => {\n  const SearchOptions = useTypedSelector((state) => state.SearchOptions.data);\n  const { searchOmdb } = useActions();\n\n  const handlePageClick = (\n    selectedPage: number,\n    SearchOptions: SearchOptionsModel,\n  ) => {\n    searchOmdb(SearchOptions.title, selectedPage);\n  };\n\n  return (\n    <>\n      <div className=\"grid\">\n        {movies.map((movie, index: number) => {\n          return (\n            <MovieCard\n              key={`${movie.imdbID}-${index}`}\n              imdbID={movie.imdbID}\n              title={movie.Title}\n              poster={movie.Poster}\n              year={movie.Year}\n            />\n          );\n        })}\n      </div>\n      <p className=\"total-results\">{totalResults} Movies found</p>\n      <Pagination\n        pageCount={Math.ceil(\n          parseInt(totalResults) / appSettings.PAGINATION_ITEMS_PER_PAGE,\n        )}\n        onPageChange={(selectedPage) => {\n          SearchOptions && handlePageClick(selectedPage, SearchOptions);\n        }}\n      />\n    </>\n  );\n};\n\nexport default MovieGrid;\n"],"names":["MovieCard","imdbID","title","poster","year","useState","details","setDetails","getDetails","getMovieDetail","response","expand","undefined","className","style","backgroundImage","Plot","Actors","Ratings","map","rating","Source","Value","label","onClick","areEqual","prevProps","nextProps","memo","movies","totalResults","SearchOptions","useTypedSelector","state","data","searchOmdb","useActions","movie","index","Title","Poster","Year","pageCount","Math","ceil","parseInt","appSettings","onPageChange","selectedPage","handlePageClick"],"sourceRoot":""}