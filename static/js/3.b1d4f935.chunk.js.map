{"version":3,"sources":["components/content/movieGrid/movieCard.tsx","components/content/movieGrid/index.tsx"],"names":["MovieCard","imdbID","title","poster","year","useState","details","setDetails","getDetails","a","getMovieDetail","response","expand","undefined","className","style","backgroundImage","Plot","Actors","Ratings","map","rating","Source","Value","label","onClick","areEqual","prevProps","nextProps","memo","MovieGrid","movies","totalResults","SearchOptions","useTypedSelector","state","data","searchOmdb","useActions","movie","index","Title","Poster","Year","pageCount","Math","ceil","parseInt","appSettings","PAGINATION_ITEMS_PER_PAGE","onPageChange","selectedPage","handlePageClick"],"mappings":"6MAWMA,EAAY,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,KAC1C,EAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAU,uCAAG,WAAOP,GAAP,eAAAQ,EAAA,sEACMC,YAAeT,GADrB,OACXU,EADW,OAGjBJ,EAAWI,GAHM,2CAAH,sDAMhB,OACE,eAAC,IAAD,CAAMC,YAAoBC,IAAZP,EAAd,UACc,QAAXH,EACC,qBACEW,UAAU,YACVC,MAAO,CACLC,gBAAgB,QAAD,OAAUb,EAAV,SAInB,6BAEF,sBAAKW,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,4BAAIZ,IACHI,GACC,sBAAKQ,UAAU,UAAf,UACE,gCACE,wCACA,mCAAIR,QAAJ,IAAIA,OAAJ,EAAIA,EAASW,UAEf,gCACE,0CACA,mCAAIX,QAAJ,IAAIA,OAAJ,EAAIA,EAASY,YAEf,gCACE,2CADF,OAEGZ,QAFH,IAEGA,OAFH,EAEGA,EAASa,QAAQC,KAAI,SAACC,GACrB,OACE,8BACE,0CACKA,QADL,IACKA,OADL,EACKA,EAAQC,OADb,YACuBD,QADvB,IACuBA,OADvB,EACuBA,EAAQE,UAFjC,UAAatB,EAAb,mBAAuBoB,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAQE,oBAW3C,sBAAKT,UAAU,SAAf,UACE,qBAAKA,UAAU,OAAf,SACE,4BAAIV,MAEN,qBAAKU,UAAU,SAAf,UACIR,GACA,cAAC,IAAD,CACEkB,MAAM,UACNC,QAAS,WACPjB,EAAWP,kBAWvByB,EAAW,SAACC,EAAkBC,GAAnB,OACfD,EAAU1B,SAAW2B,EAAU3B,QAElB4B,iBAAK7B,EAAW0B,G,oBChChBI,UAvCG,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,aACrBC,EAAgBC,aAAiB,SAACC,GAAD,OAAWA,EAAMF,cAAcG,QAC9DC,EAAeC,cAAfD,WASR,OACE,qCACE,qBAAKvB,UAAU,OAAf,SACGiB,EAAOX,KAAI,SAACmB,EAAOC,GAClB,OACE,cAAC,EAAD,CAEEvC,OAAQsC,EAAMtC,OACdC,MAAOqC,EAAME,MACbtC,OAAQoC,EAAMG,OACdtC,KAAMmC,EAAMI,MALd,UACUJ,EAAMtC,OADhB,YAC0BuC,SAShC,oBAAG1B,UAAU,gBAAb,UAA8BkB,EAA9B,mBACA,cAAC,IAAD,CACEY,UAAWC,KAAKC,KACdC,SAASf,GAAgBgB,IAAYC,2BAEvCC,aAAc,SAACC,GACblB,GA5BgB,SACtBkB,EACAlB,GAEAI,EAAWJ,EAAc/B,MAAOiD,GAwBTC,CAAgBD,EAAclB","file":"static/js/3.b1d4f935.chunk.js","sourcesContent":["import { getMovieDetail } from 'api';\nimport { Button, Card } from 'components/ui';\nimport { memo, useState } from 'react';\nimport { MovieDetailModel } from 'api/models';\ninterface Props {\n  imdbID: string;\n  title: string;\n  poster?: string;\n  year: string;\n}\n\nconst MovieCard = ({ imdbID, title, poster, year }: Props) => {\n  const [details, setDetails] = useState<MovieDetailModel>();\n\n  const getDetails = async (imdbID: string) => {\n    const response = await getMovieDetail(imdbID);\n\n    setDetails(response);\n  };\n\n  return (\n    <Card expand={details !== undefined}>\n      {poster !== 'N/A' ? (\n        <div\n          className=\"image-box\"\n          style={{\n            backgroundImage: `url('${poster}')`,\n          }}\n        />\n      ) : (\n        <></>\n      )}\n      <div className=\"info\">\n        <div className=\"details-box\">\n          <p>{title}</p>\n          {details && (\n            <div className=\"details\">\n              <div>\n                <span>Plot</span>\n                <p>{details?.Plot}</p>\n              </div>\n              <div>\n                <span>Actors</span>\n                <p>{details?.Actors}</p>\n              </div>\n              <div>\n                <span>Ratings</span>\n                {details?.Ratings.map((rating) => {\n                  return (\n                    <div key={`${imdbID}-${rating?.Value}`}>\n                      <p>\n                        - {rating?.Source}: {rating?.Value}\n                      </p>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"footer\">\n          <div className=\"year\">\n            <p>{year}</p>\n          </div>\n          <div className=\"button\">\n            {!details && (\n              <Button\n                label=\"DETAILS\"\n                onClick={() => {\n                  getDetails(imdbID);\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nconst areEqual = (prevProps: Props, nextProps: Props) =>\n  prevProps.imdbID === nextProps.imdbID;\n\nexport default memo(MovieCard, areEqual);\n","import { MovieModel, SearchOptionsModel } from 'api/models';\nimport MovieCard from './movieCard';\nimport { useActions, useTypedSelector } from 'state';\nimport { Pagination } from 'components/ui';\nimport { appSettings } from 'config';\nimport './index.scss';\n\ninterface Props {\n  movies: MovieModel[];\n  totalResults: string;\n}\n\nconst MovieGrid = ({ movies, totalResults }: Props) => {\n  const SearchOptions = useTypedSelector((state) => state.SearchOptions.data);\n  const { searchOmdb } = useActions();\n\n  const handlePageClick = (\n    selectedPage: number,\n    SearchOptions: SearchOptionsModel,\n  ) => {\n    searchOmdb(SearchOptions.title, selectedPage);\n  };\n\n  return (\n    <>\n      <div className=\"grid\">\n        {movies.map((movie, index: number) => {\n          return (\n            <MovieCard\n              key={`${movie.imdbID}-${index}`}\n              imdbID={movie.imdbID}\n              title={movie.Title}\n              poster={movie.Poster}\n              year={movie.Year}\n            />\n          );\n        })}\n      </div>\n      <p className=\"total-results\">{totalResults} Movies found</p>\n      <Pagination\n        pageCount={Math.ceil(\n          parseInt(totalResults) / appSettings.PAGINATION_ITEMS_PER_PAGE,\n        )}\n        onPageChange={(selectedPage) => {\n          SearchOptions && handlePageClick(selectedPage, SearchOptions);\n        }}\n      />\n    </>\n  );\n};\n\nexport default MovieGrid;\n"],"sourceRoot":""}